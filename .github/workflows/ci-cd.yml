name: "Buils(IOS) & upload to TestFlight"
on:
  push:
  release:
    types: [published]
jobs:
  build-ios:
    name: Build IOS
    runs-on: macos-latest
    env:
      flutter_version: 3.3.2
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: add java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '8'
      - name: echo flutter evrsion
        run: echo $flutter_version
      - name: Install flutter
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: $flutter_version
          channel: 'stable'
      - name: Setup Ruby (bundle)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: install pbxproj
        run: pip install pbxproj
      - name: Install the Apple certificate and provisioning profile
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          P12_PASSWORD=""

          # import certificate and provisioning profile from secrets
          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$MOBILEPROVISION_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Get Flutter Pub
        run: flutter pub get
      - name: Restore Pods cache
        uses: actions/cache@v2
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      - name: Install Pods
        run: cd ios && pod install --repo-update && cd ..
      - name: update export options
        run:  /usr/libexec/PlistBuddy -c 'Add :provisioningProfiles:com.trackr.githubactionstrackr string ${{ secrets.MOBILEPROVISION_NAME }}' ios/export-options.plist
      - name: setup for Manul code sign
        run: python code_sign.py ${{ secrets.TEAM_ID }} ${{ secrets.APPSTORE_ISSUER_ID }} ${{ secrets.MOBILEPROVISION_NAME }}
      - name: create ipa
        run: flutter build ipa --export-options-plist=ios/export-options.plist --release $ARGS
        env:
          GIT_COMMIT_DATE: $(git log -n1 --date=short --format="%ad")
          GIT_COMMIT_HASH: $(git log -n1 --date=short --format="%h")
          FLUTTER_VERSION: ${$(flutter --version):8:6}
          ARGS: "--dart-define=TRACKR_GIT_COMMIT_DATE=$GIT_COMMIT_DATE --dart-define=TRACKR_GIT_COMMIT_HASH=$GIT_COMMIT_HASH --dart-define=TRACKR_FLUTTER_VERSION=${FLUTTER_VERSION}"
      - name: setup for Manul code sign Re-Try 1
        if: ${{ failure() }}
        run: python code_sign.py ${{ secrets.TEAM_ID }} ${{ secrets.APPSTORE_ISSUER_ID }} ${{ secrets.MOBILEPROVISION_NAME }}
      - name: create ipa Re-Try 1
        if: ${{ failure() }}
        run: flutter build ipa --export-options-plist=ios/export-options.plist --release $ARGS
        env:
          GIT_COMMIT_DATE: $(git log -n1 --date=short --format="%ad")
          GIT_COMMIT_HASH: $(git log -n1 --date=short --format="%h")
          FLUTTER_VERSION: ${$(flutter --version):8:6}
          ARGS: "--dart-define=TRACKR_GIT_COMMIT_DATE=$GIT_COMMIT_DATE --dart-define=TRACKR_GIT_COMMIT_HASH=$GIT_COMMIT_HASH --dart-define=TRACKR_FLUTTER_VERSION=${FLUTTER_VERSION}"
      # - name: Export archive
      #   run: xcodebuild -exportArchive -archivePath build/ios/archive/Runner.xcarchive -exportPath build/ios/ -exportOptionsPlist ios/export-options.plist
      - name: upload ipa
        uses: actions/upload-artifact@v3
        with:
          name: ipa-production-release
          path: ./build/ios/ipa/githubactionstrackr.ipa
  upload_testflight:
    name: TestFlight upload
    needs: build-ios
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: Download ipa
        uses: actions/download-artifact@v1
        with:
          name: ipa-production-release
      - name: Display structure of downloaded files
        run: ls -R
      - name: Upload app to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ./ipa-production-release/githubactionstrackr.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
  
  release:
    name: release
    # needs: [upload_testflight]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      # - name: Download ipa
      #   uses: actions/download-artifact@v1
      #   with:
      #     name: ipa-production-release
      - name: add file
        run: echo 'Hello, world.' >foo.txt
      - name: Display structure of downloaded files
        run: ls -R
      - name: Push to Releases
        uses: ncipollo/release-action@v1.10.0
        with:
          allowUpdates: true
          artifacts: "foo.txt"
          # tag:  ${GITHUB_REF#refs/*/}
          token: ${{ secrets.GITHUB_TOKEN }}
  sendNotification:
        name: Send Notification
        needs: release
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v2
        - name: Echo Notification
          run: echo "Notificaton sent !" #TODO(skandar) send Notification via e-mail, Slack, Discord etc. if needed